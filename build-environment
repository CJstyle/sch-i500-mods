  
==================================================================================
ANDROID GINGERBREAD (2.3) / ICE CREAM SANDWICH (4.0) LINUX DEVELOPMENT ENVIRONMENT
==================================================================================

>> UBUNTU 11.10 X64
(http://www.ubuntu.com/download)
- VMWARE NOTE: If installing to a VMWare Guest, set the network adapter to BRIDGED instead of NAT to avoid issues
- Install all updates after installation
sudo apt-get install gnome-session-fallback
sudo apt-get install gtk2-engines-pixbuf
sudo apt-get install gnome-system-tools
sudo apt-get install gconf-editor
- Log off; switch to Gnome Classic shell with Gear icon at logon prompt. New Ubuntu shell sucks.

>> REPO
sudo apt-get install curl
mkdir ~/bin
curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
sudo mv bin /opt/
sudo chmod a+x /opt/bin/repo

>> GITHUB REGISTRATION
sudo apt-get install git-core
ssh-keygen -t rsa -C "email@email.com"
- Copy contents of ~/.ssh/id_rsa.pub to github web site
- Get token from github web site for registration below
git config --global user.name "Firstname Lastname"
git config --global user.email "email@email.com"
git config --global github.user username
git config --global github.token 0123456789your0123456789token

>> ORACLE SUN JAVA 6 
(http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html#jdk-6u29-oth-JPR)
mkdir ~/jvm
cp jdk-6u29-linux-x64.bin ~/jvm/
cd ~/jvm
chmod a+x jdk*.bin
./jdk-6u29-linux-x64.bin
rm jdk*.bin
cd ~/
sudo mv ~/jvm/* /usr/lib/jvm/
sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jre/bin/java 1
sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/bin/javac 1
rm -fr ~/jvm

>> ADDITIONAL REQUIRED PACKAGES
sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev libc6-dev lib32ncurses5-dev
sudo apt-get install ia32-libs x11proto-core-dev libx11-dev lib32readline-gplv2-dev lib32z-dev libgl1-mesa-dev 
sudo apt-get install g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc lzop
sudo ln -s /usr/lib/i386-linux-gnu/libX11.so.6 /usr/lib/i386-linux-gnu/libX11.so

>> ECLIPSE
sudo apt-get install eclipse

>> KDEVELOP
sudo apt-get install kdevelop

>> BEYOND COMPARE
(http://www.scootersoftware.com/download.php)
sudo dpkg -i bcompare-3.3.3.14128_amd64.deb

>> VIRTUALBOX
(https://www.virtualbox.org/wiki/Downloads)
sudo dpkg -i virtualbox-4.1_4.1.8-75467~Ubuntu~oneiric_amd64.deb
- Launch VirtualBox; install extension pack from File/Preferences/Extensions
- Add user to vboxusers group; have to reboot before using USB devices

>> ANDROID SDK
(http://developer.android.com/sdk/index.html)
- Open android-sdk_r16-linux.tar and extract to ~/
sudo mv ~/android-sdk-linux /opt/

>> ANDROID NDK
(http://developer.android.com/sdk/ndk/index.html)
- Open android-ndk-r7-linux-x86.tar.bz2 and extract to ~/
sudo mv ~/android-ndk-r7 /opt/

>> APKTOOL
(http://code.google.com/p/android-apktool/downloads/list)
- Open apktool-install-linux-r04-brut1.tar.bz2 and extract to ~/
- Open apktool1.4.3.tar.bz2 and extract to ~/
sudo mv ~/aapt /usr/local/bin/
sudo mv ~/apktool /usr/local/bin/
sudo mv ~/apktool.jar /usr/local/bin/

>> SMALI
(http://code.google.com/p/smali/downloads/list)
sudo mv baksmali-1.3.0.jar /usr/local/bin/baksmali.jar
sudo mv smali-1.3.0.jar /usr/local/bin/smali.jar

>> HEIMDALL
(http://www.glassechidna.com.au/products/heimdall)
sudo dpkg -i heimdall_1.3.1_amd64.deb
sudo dpkg -i heimdall-frontend_1.3.1_amd64.deb

>> SOURCERY G++ LITE 2010.09
(http://www.codesourcery.com/public/gnu_toolchain/arm-none-linux-gnueabi/arm-2010.09-50-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2)
- Extract to ~/
sudo mkdir /opt/toolchains
sudo mv arm-2010.09 /opt/toolchains/

>> SOURCERY G++ LITE 2011.09
(http://www.codesourcery.com/public/gnu_toolchain/arm-none-linux-gnueabi/arm-2011.09-70-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2)
- Extract to ~/
sudo mkdir /opt/toolchains
sudo mv arm-2011.09 /opt/toolchains/

>> ADB HARDWARE DEVICE
(http://developer.android.com/guide/developing/device.html)
(http://source.android.com/source/initializing.html)
sudo touch /etc/udev/rules.d/51-android.rules
sudo gedit /etc/udev/rules.d/51-android.rules
- Set text to the following:
	# protocols for Galaxy S
	SUBSYSTEM=="usb", SYSFS04E8=="0bb4", MODE="0666"
	# adb protocol on maguro/toro (Galaxy Nexus)
	SUBSYSTEM=="usb", ATTR{idVendor}=="04e8", ATTR{idProduct}=="6860", MODE="0600", OWNER="<username>"
	# fastboot protocol on maguro/toro (Galaxy Nexus)
	SUBSYSTEM=="usb", ATTR{idVendor}=="18d1", ATTR{idProduct}=="4e30", MODE="0600", OWNER="<username>"
- Replace <username> with Linux user id

>> ADD PATHS
gedit ~/.bashrc
- At the end of the file, add:
	export PATH=$PATH:/opt/bin/
	export PATH=$PATH:/opt/android-sdk-linux/platform-tools/
	export PATH=$PATH:/opt/android-ndk-r7/

>> ADD SUPERUSER PATHS
sudo gedit /etc/bash.bashrc
- At the end of the file, add:
	export PATH=$PATH:/opt/android-sdk-linux/platform-tools/

>> LOG OFF OR REBOOT SYSTEM NOW

>> SET DEFAULT JAVA VERSION
sudo update-alternatives --config java      [choose /usr/lib/jvm/jre/bin/java option]
sudo update-alternatives --config javac	    [choose /usr/lib/jvm/bin/javac option]

>> ECLIPSE ADT PLUGIN AND SDK DOWNLOADS
(http://developer.android.com/sdk/eclipse-adt.html#installing)
- Open Eclipse
- Help/Install New Software
- Click "Available Software Sites" link
- Check box next to URL "http://download.eclipse.org/releases/helios" / click OK
- Follow directions on Google web site for ADT Plugin (link above) section "Downloading the ADT Plugin"
- When Eclipse restarts and "Welcome to Android Development" dialog opens:
	- Choose Use Existing SDK
	- Browse to /opt/android-sdk-linux folder
	- Ignore the error message about something not being set
- Window / Android SDK Manager
- Select and Install:
	- Tools / Android SDK Tools
	- Tools / Android SDK Platform-Tools
	- Android 4.0.3
	- Android 2.3.3
- Exit Eclipse when everything is done

>> CREATE PLATFORM CODE FOLDERS
mkdir ~/android
mkdir ~/android/platform

>> GET ANDROID PLATFORM CODE (GINGERBREAD)
- VMWARE GUEST NOTE: Be sure network adapter is BRIDGED and not NAT otherwise repo will hang
mkdir ~/android/platform/android-2.3.5_r1
cd ~/android/platform/android-2.3.5_r1
repo init -u https://android.googlesource.com/platform/manifest -b android-2.3.5_r1
repo sync

>> GET ANDROID PLATFORM CODE (ICE CREAM SANDWICH)
- VMWARE GUEST NOTE: Be sure network adapter is BRIDGED and not NAT otherwise repo will hang
mkdir ~/android/platform/android-4.0.3_r1
cd ~/android/platform/android-4.0.3_r1
repo init -u https://android.googlesource.com/platform/manifest -b android-4.0.3_r1
repo sync

>> BUILD/INSTALL FASTBOOT TOOL FOR GALAXY NEXUS
cd ~/android/platform/android-4.0.3_r1
source build/envsetup.sh
lunch full-eng
make -j4 fastboot
sudo cp ~/android/platform/android-4.0.3_r1/out/host/linux-x86/bin/fastboot /opt/bin/

===============
REFERENCE STUFF
===============

>> REFERNCE: BUILD FULL ANDROID PLATFORM
cd ~/android/platform/android-x.x.x_rx
source build/envsetup.sh
lunch
make -j4

>> REFERENCE: TYPICAL GITHUB SESSION
git init
git remote add origin -m master git@github.com:username/repo.git
git pull origin master
git add / git rm / etc
git commit -m "comment"
git push origin master

REFERENCE: BRANCH GITHUB SESSION
git init
git remote add origin -t branch_name -m master git@github.com:username/repo.git
git pull origin branch_name
git fetch origin branch_name:branch_name
git checkout branch_name
git add / git rm / etc
git commit -m "comment"
git push origin branch_name

